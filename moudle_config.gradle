//切换集成和module

def isModule = isRunModule

if (isModule.toBoolean()) {
    apply plugin: 'com.android.application'
} else {
    apply plugin: 'com.android.library'
}
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'


android {
    compileSdkVersion rootProject.ext.androidVersion.compileSdkVersion
    defaultConfig {
        minSdkVersion rootProject.ext.androidVersion.minSdkVersion
        targetSdkVersion rootProject.ext.androidVersion.targetSdkVersion
        versionCode rootProject.ext.androidVersion.versionCode
        versionName rootProject.ext.androidVersion.versionName
        multiDexEnabled rootProject.ext.androidVersion.multiDexEnabled
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [AROUTER_MODULE_NAME: project.getName()]
            }
        }
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
            //AndroidManifest路径
            if (isModule.toBoolean()) {
                manifest.srcFile 'src/main/module/AndroidManifest.xml'
            } else {
                manifest.srcFile 'src/main/AndroidManifest.xml'
                java {
                    exclude 'debug/**'
                }
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    //一下配置  每个lib or module 都要加
    //=========================================================
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    //开启DataBinding
    dataBinding {
        enabled true
    }
    //=========================================================
}
def room_version = "2.2.5"
dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation fileTree(dir: 'libs', include: ['*.aar'])
    api project(':libcommon')
    kapt  "androidx.room:room-compiler:$room_version"
    annotationProcessor rootProject.ext.dep_nor["arouter-compiler"]
}
